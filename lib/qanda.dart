import 'advices.dart';

var advi = new Advices();

class QandA{
  var questions = [
    /*1*/["De que tipo es el sujeto que contiene el elemento que puede ser observado en la Arquitectura de Componentes de Android", advi.modu[0], advi.clas[0]],
    /*2*/["En la arquitectura MVC están contenidos tanto el elemento View como el Controller en un solo componente", advi.modu[1], advi.clas[1]],
    /*3*/["Para aplicar el principio Liskov substitution al declarar un objeto. ¿De que tipo deberia ser el objeto y cual deberia ser la clase que instancia el objeto?", advi.modu[2], advi.clas[2]],
    /*4*/["¿Cual es la propuesta de Android Jetpack en el desarrollo Movil", advi.modu[3], advi.clas[3]],
    /*5*/["Single Responsability significa que:", advi.modu[4], advi.clas[4]],
    /*6*/["¿Cuando es mas conveniente usar la arquitectura MVVM?", advi.modu[5], advi.clas[5]],
    /*7*/["¿Cual es la clase que permite manejar de manera global el estado de la clase ViewModel?", advi.modu[6], advi.clas[6]],
    /*8*/["¿Cual es la arquitectura que implementa Android JetPack?", advi.modu[7], advi.clas[7]],
    /*9*/["Este nos permite extender comportamientos hacia una clase en particular ademas que nos permite ensamblarlos y desensamblarlo cuando sea necesario.", advi.modu[8], advi.clas[8]],
    /*10*/["¿En la arquitectura MVP buscamos que la vista tenga solo la responsabilidad de los componentes de la interfaz grafica", advi.modu[9], advi.clas[9]],
    /*11*/["Hablando sobre los principios SOLID ¿En que consiste el Interface segregation principle?", advi.modu[10], advi.clas[10]],
    /*12*/["¿Que es una arquitectura de diseño?", advi.modu[11], advi.clas[11]],
    /*13*/["En la arquitectura MVP ¿De que trata la capa Repository", advi.modu[12], advi.clas[12]],
    /*14*/["¿Cuales son los componentes de la arquitectura de capas basico?", advi.modu[13], advi.clas[13]],
    /*15*/["¿Que significa la C en las siglas MVC?", advi.modu[14], advi.clas[14]],
    /*16*/["¿Que es un patron de diseño?", advi.modu[15], advi.clas[15]],
    /*17*/["Esta es la manera de evitar declarar findViewById", advi.modu[16], advi.clas[16]],
    /*18*/["¿Como funciona el elemento LiveData?", advi.modu[17], advi.clas[17]],
    /*19*/["En el patron observer de la arquitectura de componentes ¿Cual es el metodo que permite la actualizacion de los datos?", advi.modu[18], advi.clas[18]],
    /*20*/["¿Cual es el elemento mas abstracto recomendable de inyectar en un metodo o constructor?", advi.modu[19], advi.clas[19]],
    /*21*/["Hablando del Patron Observer. Cuando un elemento es ser observable significa que notificara automaticamente cualquier cambio que sufra", advi.modu[20], advi.clas[20]],
    /*22*/["¿Cual es el modelo basico de arquitectura con el que empezo Android?", advi.modu[21], advi.clas[21]],
    /*23*/["La inyeccion de dependencias es un alto nivel de Polimorfismo que proviene de aplicar abstracion", advi.modu[22], advi.clas[22]],
    /*24*/["En la arquitectura MVP ¿Cuales son los elementos que componen la capa Model?", advi.modu[23], advi.clas[23]],
    /*25*/["¿Esta es la arquitectura de directorios mas cercana a la arquitectura MVP?", advi.modu[24], advi.clas[24]],
    /*26*/["¿Cual es el patron de diseño que usa MVVM?", advi.modu[25], advi.clas[25]],
    /*27*/["¿Cual es el papel que juega el Presenter en la arquitectura MVP?", advi.modu[26], advi.clas[26]],
    /*28*/["Estos son ejemplos de elementos que pueden ser de tipo LifecycleOwner", advi.modu[27], advi.clas[27]],
    /*29*/["¿Cual es la paqueteria de Android JetPack que nos permite utilizar LifeCycle", advi.modu[28], advi.clas[28]],
    /*30*/["Este es mas recomendado de utilizar que la herencia cuando queremos añadir comportamiento a nuestras clases", advi.modu[29], advi.clas[29]],

  ];

  var choices = [
    /*1*/["Model", "String", "MutableLiveData", ""],
    /*2*/["Falso", "Verdadero", "", ""],
    /*3*/["El tipo deberia ser una clase padre o una interfaz y la instanciacion deberia ser la clase que hereda o implementa la interfaz", "El tipo deberia ser la clase propia del objeto y la instanciacion tambien", "El tipo deberia ser la clase que hereda o implementa la interfaz y la instanciacion deberia ser una clase padre o una interfaz", ""],
    /*4*/["Organizar todos los elementos en componentes ensamblables para agilizar el desarrollo", "Es la nueva API de diseño para crear interfaces mas elegantes en Android", "Es solo un tipo de arquitectura, mas sencilla de implementar", ""],
    /*5*/["Una clase debe hacerse cargo de todas las responsabilidades del codigo", "Una clase debe tener solo una responsabilidad", "Una clase debe compartir responsabilidad solo con otra clase", ""],
    /*6*/["Cuando queremos que la vista se vea bien", "Cuando queremos conectar los casos de uso con la vista", "Cuando necesitamos que los datos se muestren RealTime", ""],
    /*7*/["ViewModelProviders", "MVP", "Picasso", ""],
    /*8*/["MVC", "MVP", "MVVM", ""],
    /*9*/["Composicion", "Herencia", "Clases", ""],
    /*10*/["Verdadero", "Falso", "", ""],
    /*11*/["Si una interface crece demasiado pierde su objetivo y viola el primer principio", "Una clase siempre debe tener implementada una interfaz", "Una clase solo debe tener una responsabilidad", ""],
    /*12*/["Proporciona la estructura, funcionamiento e interracion entre las partes del software", "Es una solucion a un problema comun de codigo que es reutilizable", "Es una estructura que sirve de muestra para clonar codigo", ""],
    /*13*/["Representa los casos de uso", "Representa las implementaciones de la vista", "Representa las implementaciones de las fuentes de datos", ""],
    /*14*/["Model View Controller", "Model View Presenter", "Presentacion, Business Logic, y Data", ""],
    /*15*/["Controller", "Command", "Core", ""],
    /*16*/["proporciona la estructura, funcionamiento e interaccion entre las partes del software", "Es una solucion a un problema comun de codigo que es reutilizable", "Es un repositorio de Github que sirve de muestra para clonar codigo", ""],
    /*17*/["MVP", "Android JetPack", "DataBinding"],
    /*18*/["Representa la capa de transformacion de datos", "Representa los atributos de la vista", "Los componentes de la aplicacion pueden observar y ser notificados por los cambios de los objetos LiveData", ""],
    /*19*/["viewmodel", "observe", "MVP", ""],
    /*20*/["un metodo constructor", "interfaces", "una clase que hereda de otra", ""],
    /*21*/["Verdadero", "Falso", "", ""],
    /*22*/["MVVM", "Andorid JetPack", "MVC", ""],
    /*23*/["Verdadero", "Falso", "", ""],
    /*24*/["Data Binding", "Interactor y Repository", "LiveData", ""],
    /*25*/["-Interactor -Model -Presenter -Repository -View", "-Model -View -Controller", "-Model -View -ViewModel", ""],
    /*26*/["Patron Observer", "Adapter", "Factory", ""],
    /*27*/["Representa los atributos de la vista", "Es el orquestador entre la vista y la capa de datos", "Representa la capa de transformacion de datos", ""],
    /*28*/["Activity y Fragment", "MVP", "LiveData", ""],
    /*29*/["andoridx", "andoridz", "androidSupport", ""],
    /*30*/["LiveData", "Composicion", "JetPack", ""],


  ];

  var correctAnswers = [
    /*1*/"MutableLiveData",
    /*2*/"Verdadero",
    /*3*/"El tipo deberia ser una clase padre o una interfaz y la instanciacion deberia ser la clase que hereda o implementa la interfaz",
    /*4*/"Organizar todos los elementos en componentes ensamblables para agilizar el desarrollo",
    /*5*/"Una clase debe tener solo una responsabilidad",
    /*6*/"Cuando necesitamos que los datos se muestren RealTime",
    /*7*/"ViewModelProviders",
    /*8*/"MVVM",
    /*9*/"Composicion",
    /*10*/"Verdadero",
    /*11*/"Si una interface crece demasiado pierde su objetivo y viola el primer principio",
    /*12*/"Proporciona la estructura, funcionamiento e interracion entre las partes del software",
    /*13*/"Representa las implementaciones de las fuentes de datos",
    /*14*/"Presentacion, Business Logic, y Data",
    /*15*/"Controller",
    /*16*/"Es una solucion a un problema comun de codigo que es reutilizable",
    /*17*/"DataBinding",
    /*18*/"Los componentes de la aplicacion pueden observar y ser notificados por los cambios de los objetos LiveData",
    /*19*/"observe",
    /*20*/"interfaces",
    /*21*/"Verdadero",
    /*22*/"MVC",
    /*23*/"Verdadero",
    /*24*/"Interactor y Repository",
    /*25*/"-Interactor -Model -Presenter -Repository -View",
    /*26*/ "Patron Observer",
    /*27*/ "Es el orquestador entre la vista y la capa de datos",
    /*28*/"Activity y Fragment",
    /*29*/"andoridx",
    /*30*/"Composicion",


  ];
}